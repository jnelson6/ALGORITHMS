A tree is a directed acyclic graph.

A binary tree is a tree where each node does have two children. The children may
actually be null.

A binary search tree is a binary tree with a special property. All elements to
the left of a node n must contain a key whose value is < the value in n. All
elements to the right of a node n must contain contain a key whose value is >
the value in n.

In CS 385, binary search trees will not be allowed to contain duplicate values.

Traversals:

Preorder   root  left  right
Inorder    left  root  right
Postorder  left  right root

Preorder : 8 3 1 6 4 7 10 14 13
Inorder  : 1 3 4 6 7 8 10 13 14
Postorder: 1 4 7 6 3 13 14 10 8

Runtime of any of these traversals: theta(n)

Height of a tree: The number of edges from the root to the deepest leaf.
Example: 3

height(root with no children) = 0
height(nullptr) = -1

Internal nodes are nodes that have at least one non-null child.
Example: 5

Leaves are nodes that have two null children.
Example: 4

Maximum width of a tree:
The number of nodes on the level that contains the most nodes.
Example: 3

Diameter of a tree:
The number of nodes on the longest path between any two nodes.
Example: 7
